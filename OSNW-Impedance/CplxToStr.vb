Option Explicit On
Option Strict On
Option Compare Binary
Option Infer Off

' This document contains extensions to the System.Numerics.Complex structure.
' The items here are related to alternative implemenations of ToString() that
' produce output in standard form(s) used for complex numbers.

Imports System.Diagnostics.CodeAnalysis
Imports System.Runtime.CompilerServices

Partial Public Module ComplexExtensions

#Region "ToStandardString Utils"

    '''' <summary>
    '''' Converts a Complex.ToString() string into a standard form string using
    '''' the specified <c>StandardizationStyles</c>.
    '''' </summary>
    '''' <param name="standardizationStyle">Specifies the 
    '''' <see cref="StandardizationStyles"/> to be used to generate the standard
    '''' form string.</param>
    '''' <param name="complexStr">The Complex.ToString() string to be
    '''' converted to standard form.</param>
    '''' <param name="standardizedStr">Returns the standardized string.</param>
    Private Sub StandardizeString(
        ByVal standardizationStyle As StandardizationStyles,
        ByVal complexStr As System.String,
        ByRef standardizedStr As System.String)

        ' No input checking. This is internal private and expects a proper
        ' string generated by Complex.ToString().
        ' Expect the string to be in the form "<real; imaginary>".

        ' Extract the real part.
        Dim SemiIndex As System.Int32 = complexStr.IndexOf(CHARSEMI)
        Dim RealStr As System.String = complexStr.Substring(1, SemiIndex - 1)

        ' Then, extract the imaginary part.

        ' Isolate the interesting part.
        Dim BeginImaginary As System.Int32 = SemiIndex + 2 ' After the space.
        Dim ImaginarySegment As System.String = complexStr.Substring(
            BeginImaginary, complexStr.Length - BeginImaginary - 1)

        ' Construct the standard form string.

        ' Get the sign and magnitude of the imaginary component.
        Dim IsNeg As System.Boolean = ImaginarySegment.StartsWith(CHARMINUS)
        Dim ImaginaryMagStr As System.String = ImaginarySegment.Substring(
                If(IsNeg, 1, 0),
                If(IsNeg, ImaginarySegment.Length - 1, ImaginarySegment.Length))

        ' Assign the text containing the sign of the imaginary part.
        Dim ImaginarySign As System.String = If(
            (standardizationStyle And StandardizationStyles.Open) > 0,
            $" {If(IsNeg, CHARMINUS, CHARPLUS)} ", ' With spaces.
            $"{If(IsNeg, CHARMINUS, CHARPLUS)}") ' Without spaces.

        standardizedStr =
            If((standardizationStyle And StandardizationStyles.AiB) > 0,
               $"{RealStr}{ImaginarySign}i{ImaginaryMagStr}",
               $"{RealStr}{ImaginarySign}{ImaginaryMagStr}i")

    End Sub ' StandardizeString

#End Region ' "ToStandardString Utils"

#Region "ToStandardString Implementations"

    ' System.Numerics.Complex in .NET 8.0 has these:
    '   They optionally specify a format string, an IFormatProvider, or both.
    '   All cases eventually call the full case, which will assign defaults as
    '   needed.
    '   Create similar extensions below.

    ' public override string ToString() => ToString(null, null);
    ' public string ToString([StringSyntax(StringSyntaxAttribute.NumericFormat)] string? format) => ToString(format, null);
    ' public string ToString(IFormatProvider? provider) => ToString(null, provider);
    ' public string ToString([StringSyntax(StringSyntaxAttribute.NumericFormat)] string? format, IFormatProvider? provider)
    ' {
    '     // $"<{m_real.ToString(format, provider)}; {m_imaginary.ToString(format, provider)}>";
    '     var handler = new DefaultInterpolatedStringHandler(4, 2, provider, stackalloc char[512]);
    '     handler.AppendLiteral("<");
    '     handler.AppendFormatted(m_real, format);
    '     handler.AppendLiteral("; ");
    '     handler.AppendFormatted(m_imaginary, format);
    '     handler.AppendLiteral(">");
    '     return handler.ToStringAndClear();
    ' }

    '    public string ToString([StringSyntax(StringSyntaxAttribute.NumericFormat)] string? format, IFormatProvider? provider)
    ''' <summary>
    ''' Converts the value of the current complex number to its equivalent
    ''' string representation in standard form by using the specified layout
    ''' format, numeric format, and culture-specific format information for its
    ''' real and imaginary parts.
    ''' </summary>
    ''' <param name="complex">The <see cref="System.Numerics.Complex"/> to be
    ''' converted.</param>
    ''' <param name="standardizationStyle">Specifies the 
    ''' <see cref="StandardizationStyles"/> to be used to generate the standard
    ''' form string.</param>
    ''' <param name="format">A standard or custom numeric format
    ''' string.</param>
    ''' <param name="provider">An object that supplies culture-specific
    ''' formatting information.</param>
    ''' <returns>The current complex number expressed in standard
    ''' form.</returns>
    <Extension()>
    Public Function ToStandardString(
        ByVal complex As System.Numerics.Complex,
        ByVal standardizationStyle As StandardizationStyles,
        <StringSyntax(
          System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.NumericFormat)>
          ByVal format As System.String,
        ByVal provider As System.IFormatProvider) _
        As System.String

        Dim StdStr As System.String = System.String.Empty
        OSNW.Numerics.ComplexExtensions.StandardizeString(
            standardizationStyle, complex.ToString(format, provider), StdStr)
        Return StdStr
    End Function ' ToStandardString

    '    public override string ToString()
    ''' <summary>
    ''' Converts the value of the current complex number to its equivalent
    ''' string representation in standard form by using the specified layout
    ''' format information, and using the default numeric format and
    ''' culture-specific format for its real and imaginary parts.
    ''' </summary>
    ''' <param name="complex">The <see cref="System.Numerics.Complex"/> to be
    ''' converted.</param>
    ''' <param name="standardizationStyle">Specifies the 
    ''' <see cref="StandardizationStyles"/> to be used to generate the standard
    ''' form string.</param>
    ''' <returns>The current complex number expressed in standard
    ''' form.</returns>
    <Extension()>
    Public Function ToStandardString(
        ByVal complex As System.Numerics.Complex,
        ByVal standardizationStyle As StandardizationStyles) _
        As System.String

        Dim StdStr As System.String = System.String.Empty
        OSNW.Numerics.ComplexExtensions.StandardizeString(standardizationStyle,
            complex.ToString(Nothing, Nothing), StdStr)
        Return StdStr
    End Function ' ToStandardString

    '    public string ToString([StringSyntax(StringSyntaxAttribute.NumericFormat)] string? format)
    ''' <summary>
    ''' Converts the value of the current complex number to its equivalent
    ''' string representation in standard form by using the specified layout
    ''' format and numeric format information, and using the default
    ''' culture-specific format information, for its real and imaginary parts.
    ''' </summary>
    ''' <param name="complex">The <see cref="System.Numerics.Complex"/> to be
    ''' converted.</param>
    ''' <param name="standardizationStyle">Specifies the 
    ''' <see cref="StandardizationStyles"/> to be used to generate the standard
    ''' form string.</param>
    ''' <param name="format">A standard or custom numeric format
    ''' string.</param>
    ''' <returns>The current complex number expressed in standard
    ''' form.</returns>
    <Extension()>
    Public Function ToStandardString(
        ByVal complex As System.Numerics.Complex,
        ByVal standardizationStyle As StandardizationStyles,
        <StringSyntax(StringSyntaxAttribute.NumericFormat)>
            ByVal format As System.String) _
        As System.String

        Dim StdStr As System.String = System.String.Empty
        OSNW.Numerics.ComplexExtensions.StandardizeString(standardizationStyle,
            complex.ToString(format, Nothing), StdStr)
        Return StdStr
    End Function ' ToStandardString

    '    public string ToString(IFormatProvider? provider)
    ''' <summary>
    ''' Converts the value of the current complex number to its equivalent
    ''' string representation in standard form by using the specified layout
    ''' format and culture-specific format information, and using the
    ''' default numeric format, for its real and imaginary parts.
    ''' </summary>
    ''' <param name="complex">The <see cref="System.Numerics.Complex"/> to be
    ''' converted.</param>
    ''' <param name="standardizationStyle">Specifies the 
    ''' <see cref="StandardizationStyles"/> to be used to generate the standard
    ''' form string.</param>
    ''' <param name="provider">An object that supplies culture-specific
    ''' formatting information.</param>
    ''' <returns>The current complex number expressed in standard
    ''' form.</returns>
    <Extension()>
    Public Function ToStandardString(
        ByVal complex As System.Numerics.Complex,
        ByVal standardizationStyle As StandardizationStyles,
        ByVal provider As System.IFormatProvider) _
        As System.String

        Dim StdStr As System.String = System.String.Empty
        OSNW.Numerics.ComplexExtensions.StandardizeString(
            standardizationStyle, complex.ToString(Nothing, provider), StdStr)
        Return StdStr
    End Function ' ToStandardString

    '    public override string ToString()
    ''' <summary>
    ''' Converts the value of the current complex number to its equivalent
    ''' string representation in standard form by using the default layout
    ''' format, numeric format, and culture-specific format information for its
    ''' real and imaginary parts.
    ''' </summary>
    ''' <param name="complex">The <see cref="System.Numerics.Complex"/> to be
    ''' converted.</param>
    ''' <returns>The current complex number expressed in standard
    ''' form.</returns>
    <Extension()>
    Public Function ToStandardString(
        ByVal complex As System.Numerics.Complex) _
        As System.String

        Dim StdStr As System.String = System.String.Empty
        OSNW.Numerics.ComplexExtensions.StandardizeString(
            DEFAULTSTANDARDIZATIONSTYLE,
            complex.ToString(Nothing, Nothing), StdStr)
        Return StdStr
    End Function ' ToStandardString

#End Region ' "ToStandardString Implementations"

End Module ' ComplexExtensions
